// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebChatSignalR.Data;

#nullable disable

namespace WebChatSignalR.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20250327160208_InitialIdentty")]
    partial class InitialIdentty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebChatSignalR.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("Accessfailedcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Concurrencystamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Emailconfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("emailconfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Lockoutenabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTime?>("Lockoutend")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lockoutend");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("Normalizedemail")
                        .HasColumnType("text")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("Normalizedusername")
                        .HasColumnType("text")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Passwordhash")
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<bool?>("Phonenumberconfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Securitystamp")
                        .HasColumnType("text")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Twofactorenabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("appusers_pkey");

                    b.HasIndex(new[] { "Email" }, "appusers_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Normalizedemail" }, "appusers_normalizedemail_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Normalizedusername" }, "appusers_normalizedusername_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "appusers_username_key")
                        .IsUnique();

                    b.ToTable("appusers", (string)null);
                });

            modelBuilder.Entity("WebChatSignalR.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlockedBy")
                        .HasColumnType("integer")
                        .HasColumnName("BlockedBy");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatorId");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsBlocked");

                    b.Property<bool>("IsReported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsReported");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("groups_pkey");

                    b.HasIndex("CreatorId");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("WebChatSignalR.Models.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("GroupId");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("groupmembers_pkey");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("groupmembers", (string)null);
                });

            modelBuilder.Entity("WebChatSignalR.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea")
                        .HasColumnName("file");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("FileName");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("GroupId");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("RoomId");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("messages_pkey");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("WebChatSignalR.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockedBy")
                        .HasColumnType("integer")
                        .HasColumnName("BlockedBy");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatorId");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsBlocked");

                    b.Property<bool>("IsReported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsReported");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("UnreadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("UnreadCount");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("rooms_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserId");

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("WebChatSignalR.Models.VoiceMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FilePath");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("GroupId");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("RoomId");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("voicemessages_pkey");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("voicemessages", (string)null);
                });

            modelBuilder.Entity("WebChatSignalR.Models.Group", b =>
                {
                    b.HasOne("WebChatSignalR.Models.AppUser", "Creator")
                        .WithMany("Groups")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("groups_CreatorId_fkey");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("WebChatSignalR.Models.GroupMember", b =>
                {
                    b.HasOne("WebChatSignalR.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("groupmembers_GroupId_fkey");

                    b.HasOne("WebChatSignalR.Models.AppUser", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("groupmembers_UserId_fkey");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebChatSignalR.Models.Message", b =>
                {
                    b.HasOne("WebChatSignalR.Models.Group", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("messages_GroupId_fkey");

                    b.HasOne("WebChatSignalR.Models.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("messages_RoomId_fkey");

                    b.HasOne("WebChatSignalR.Models.AppUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_UserId_fkey");

                    b.Navigation("Group");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebChatSignalR.Models.Room", b =>
                {
                    b.HasOne("WebChatSignalR.Models.AppUser", "Creator")
                        .WithMany("RoomCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("rooms_CreatorId_fkey");

                    b.HasOne("WebChatSignalR.Models.AppUser", "User")
                        .WithMany("RoomUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("rooms_UserId_fkey");

                    b.Navigation("Creator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebChatSignalR.Models.VoiceMessage", b =>
                {
                    b.HasOne("WebChatSignalR.Models.Group", "Group")
                        .WithMany("VoiceMessages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("voicemessages_GroupId_fkey");

                    b.HasOne("WebChatSignalR.Models.Room", "Room")
                        .WithMany("VoiceMessages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("voicemessages_RoomId_fkey");

                    b.HasOne("WebChatSignalR.Models.AppUser", "User")
                        .WithMany("VoiceMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("voicemessages_UserId_fkey");

                    b.Navigation("Group");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebChatSignalR.Models.AppUser", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("Groups");

                    b.Navigation("Messages");

                    b.Navigation("RoomCreators");

                    b.Navigation("RoomUsers");

                    b.Navigation("VoiceMessages");
                });

            modelBuilder.Entity("WebChatSignalR.Models.Group", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");

                    b.Navigation("VoiceMessages");
                });

            modelBuilder.Entity("WebChatSignalR.Models.Room", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("VoiceMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
